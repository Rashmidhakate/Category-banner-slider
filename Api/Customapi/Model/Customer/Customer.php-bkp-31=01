<?php

namespace Brainvire\Mobileapi\Model\Customer;

use Brainvire\Mobileapi\Api\Customer\CustomerInterface;
//use Magento\Framework\Encryption\EncryptorInterface;
use Magento\Webapi\Model\Cache\Type\Webapi as WebapiCache;
use Magento\Framework\App\Filesystem\DirectoryList;

/**
 * Defines the implementaiton class of the \Brainvire\Mobileapi\Api\CustomerInterface
 */
class Customer extends \Magento\Framework\Model\AbstractModel implements CustomerInterface {

	const CACHE_ID = 'customer_webapi';
    const PRODUCT_LIMIT = 20;

	/**
	 *
	 * @var WebapiCache
	 */
	protected $cache;
	protected $storeManager;
	// protected $encrypt;
	protected $customerRepositoryInterface;
	protected $accountManagementInterface;
	protected $subscriberFactory;
	protected $subscriber;
	protected $customerSession;
	protected $storeInformation;
	protected $customerCheck;
	protected $_filesystem;
	protected $_wishlistCollectionFactory;

	/**
	 *
	 * @param WebapiCache $cache
	 * @param \Magento\Store\Model\StoreManagerInterface $storeManager
	 * @param \Magento\Framework\Encryption\EncryptorInterface $encryt
	 * @param \Magento\Customer\Api\CustomerRepositoryInterface $customerRepositoryInterface
	 * @param \Magento\Customer\Api\AccountManagementInterface $customerAccount
	 * @param \Magento\Newsletter\Model\SubscriberFactory $subscriberFactory
	 * @param \Magento\Newsletter\Model\SubscriberFactory $subscriberFactory
	 * @param \Magento\Newsletter\Model\Subscriber $subscriber
	 */
	public function __construct(
		WebapiCache $cache,
		\Magento\Customer\Api\CustomerRepositoryInterface $customerRepositoryInterface,
		\Magento\Customer\Api\AccountManagementInterface $customerAccount,
		\Magento\Newsletter\Model\SubscriberFactory $subscriberFactory,
		\Magento\Newsletter\Model\Subscriber $subscriber,
		\Magento\Customer\Model\Session $customerSession,
		\Magento\Customer\Model\Customer $customerCheck,
		\Magento\Sales\Model\ResourceModel\Order\CollectionFactory $orderCollectionFactory,
		// \Brainvire\Mobileapi\Helper\StoreInformation $StoreInformation,
		\Magento\Customer\Model\CustomerFactory $customerFactory,
		\Magento\Sales\Model\Order $orderModel,
		\Magento\Catalog\Model\ProductRepository $productModel,
		\Magento\Customer\Model\ResourceModel\CustomerFactory $customerResourceFactory,
		// \Brainvire\Mobileapi\Model\AuthtokenFactory $authtoken,
		\Brainvire\Mobileapi\Helper\Data $generalHelper,
		\Magento\Framework\App\ResourceConnection $resourceConnection,
		\Magento\Integration\Model\Oauth\TokenFactory $tokenModelFactory,
		\Magento\Store\Model\StoreManagerInterface $storeManager,
		\Magento\Quote\Api\CartManagementInterface $cartManagementInterface,
		\Magento\Quote\Api\CartRepositoryInterface $quoteRepository,
		\Magento\Framework\Pricing\Helper\Data $pricingHelper,
		\Magento\Sales\Api\Data\OrderInterface $order,
		\Magento\Customer\Model\Address $address,
        \Magento\Framework\Filesystem $filesystem,
        \Magento\Framework\App\RequestInterface $request,
        \Magento\Wishlist\Model\WishlistFactory $wishlist,
        \Magento\Catalog\Model\ProductFactory $productFactory,
        \Magento\Framework\Stdlib\DateTime\TimezoneInterface $timezone,
        \Magento\Wishlist\Model\Item $wishlistItem,
        \Magento\Wishlist\Model\Wishlist $wishlistProvider,
        \Magento\Framework\Event\ManagerInterface $eventManager,
        \Magento\Wishlist\Model\ResourceModel\Item\CollectionFactory $wishlistCollectionFactory
	) {
		$this->cache = $cache;
		// $this->storeInformation = $StoreInformation;
		$this->customerRepositoryInterface = $customerRepositoryInterface;
		$this->accountManagementInterface = $customerAccount;
		$this->subscriberFactory = $subscriberFactory;
		$this->subscriber = $subscriber;
		$this->customerSession = $customerSession;
		$this->customerCheck = $customerCheck;
		$this->orderCollection = $orderCollectionFactory;
		$this->customerFactory = $customerFactory;
		$this->orderModel = $orderModel;
		$this->productModel = $productModel;
		$this->customerResourceFactory = $customerResourceFactory;
		// $this->_customerToken = $authtoken;
		$this->tokenModelFactory = $tokenModelFactory;
		$this->resourceConnection = $resourceConnection;
		$this->generalHelper = $generalHelper;
		$this->_storeManager = $storeManager;
		$this->cartManagementInterface = $cartManagementInterface;
		$this->quoteRepository = $quoteRepository;
		$this->pricingHelper = $pricingHelper;
		$this->order = $order;
		$this->_address = $address;
	    $this->_filesystem = $filesystem;
		$this->timezone = $timezone;
        $this->_wishlist = $wishlist;
        $this->_productFactory = $productFactory;
        $this->request = $request;
        $this->_wishlistItem = $wishlistItem;
        $this->_wishlistProvider = $wishlistProvider;
        $this->eventManager = $eventManager;
        $this->_wishlistCollectionFactory = $wishlistCollectionFactory;
    }

	/**
	 * Autenticate the customer by email and password
	 *
	 * @param string $email
	 * @param string $password
     * @param string $firstname
     * @param string $lastname
	 * @param string $device_type
	 * @param string $device_token
	 * @param string $appVersion
	 * @param string $social_type
	 * @param string $is_social_login
	 * @param string $social_token
	 * @return \Brainvire\Mobileapi\Api\Data\CustomerLoginInformationInterface
	 */
	public function login($email, $password, $firstname = '', $lastname = '', $device_type = '', $device_token = '', $appVersion = '', $social_type = '', $is_social_login = '', $social_token = '') {
		// Intialize the variables
		$data = array();
		try {
            $websiteId = 1;
            $customerObj = $this->customerCheck->setWebsiteId($websiteId)->loadByEmail($email);
            if (count($customerObj->getData()) && ($is_social_login == "" || $is_social_login == "false")) {
                $ch = curl_init();
                $host = $this->_storeManager->getStore()->getBaseUrl();
                curl_setopt($ch, CURLOPT_URL, $host . 'rest/V1/integration/customer/token');
                curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
                $postData['username'] = $email;
                $postData['password'] = $password;
                curl_setopt($ch, CURLOPT_HTTPHEADER, array(
                        'Content-Type: application/json',
                        'Content-Length: ' . strlen(json_encode($postData)),
                    )
                );
                curl_setopt($ch, CURLOPT_POST, count($postData));
                curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($postData));
                $token = curl_exec($ch);
                curl_close($ch);
                $token = json_decode($token, 1);
                if (is_array($token) && array_key_exists('message', $token)) {
                    // $message = "Please enter valid password.";
                    $error = (object)array();
                    $data = array('statusCode' => strval(400), 'message' => strval($token['message']), 'data' => $error);
                    echo json_encode($data);
                    exit;
                }
            }elseif ($is_social_login == "" || $is_social_login == "false") {
                $message = "Invalid login or password.";
                $error = (object) array();
                $data = array('statusCode' => strval('400'), 'message' => strval($message), 'data' => $error);
                echo json_encode($data);
                exit;
            }
            $customerObj = $this->customerCheck->setWebsiteId($websiteId)->loadByEmail($email);

            if ($customerObj->getId()) {
				if (!isset($is_social_login) || trim($is_social_login) == '' || $is_social_login == 'false') {
					if ($this->customerCheck->getConfirmation() && $this->customerCheck->isConfirmationRequired()) {
						$error = (object) array();
						$message = "This account isn't confirmed. Verify and try again.";
						$data = array('statusCode' => strval('400'), 'message' => strval($message), 'data' => $error);
						echo json_encode($data);
						exit;
					}
					if (!$this->customerCheck->validatePassword($password)) {
						$message = "Invalid login or password.";
						$error = (object) array();
						$data = array('statusCode' => strval('400'), 'message' => strval($message), 'data' => $error);
						echo json_encode($data);
						exit;
					}
					if ($this->customerCheck->authenticate($email, $password)) {
						$customer = $this->customerRepositoryInterface->get($email, $websiteId);
						$firstName = strval($customer->getFirstname());
						$lastName = strval($customer->getLastname());
						$fullName = "";

						// Get decrypted customer id
						$customer_id = $customer->getId();
						if ($lastName == '.' || $lastName == 'lastname') {
							$fullName = $firstName;
						} else {
							$fullName = $firstName . " " . $lastName;
						}
						
						// $referrel = $this->generalHelper->getReferralLinkId($customer->getId());
						// Set customer information.
						$status = 'Success';
						$platform = strtolower($device_type);
						$returnData = $this->loginCustomer($device_token, $platform, $customer->getId());
//						$quoteId = $this->getQuoteId($customer);
//						$quote = $this->quoteRepository->get($quoteId);
//						$cartData = $quote->getAllVisibleItems();
//						$currentItemCount = (int) $quote->getItemsQty();
						$address = $this->_address->load($customer->getDefaultBilling());
                        if ($customer->getDefaultBilling()){
                            $telephone = $address->getTelephone();
                        }elseif($customer->getCustomAttribute('mobile_number')){
                            $telephone = $customer->getCustomAttribute('mobile_number')->getValue();
                        }else{
                            $telephone = '';
                        }
						$output = array(
							'customer_id' => strval($customer_id),
							'login_status' => strval($status),
							'email' => strval($customer->getEmail()),
							'full_name' => strval($fullName),
                            'access_token' => strval($token),
						);
						$message = "Customer login details has been verified successfully.";
						$data = array('statusCode' => strval('200'), 'message' => strval($message), 'data' => $output);
						echo json_encode($data);
						exit;
					} else {
						$errors = array(
							'invalid_details' => __('Invalid login or password.'),
							'account_locked' => __('The account is locked.'),
							'account_confirmation' => __('This account is not confirmed.'),
						);
						$message = "Invalid login or password.";
						$data = array('statusCode' => strval('400'), 'message' => strval($message), 'data' => $errors);
						echo json_encode($data);
						exit;
					}
				} else {
					// if ($customerObj->getId()) {
					// 	$error = (object) array();
					// 	$data = array('statusCode' => strval('400'), 'message' => strval('Customer with this email already exist.'), 'data' => $error);
					// 	echo json_encode($data);
					// 	exit;
					// }
					if (!isset($is_social_login) || trim($is_social_login) == '' || $is_social_login == 'false') {
						$error = (object) array();
						$data = array('statusCode' => strval('400'), 'message' => strval('Social Type is required.'), 'data' => $error);
						echo json_encode($data);
						exit;
					} else {
						if (!isset($social_token) || trim($social_token) == '') {
							$error = (object) array();
							$data = array('statusCode' => strval('400'), 'message' => strval('Social Token is required.'), 'data' => $error);
							echo json_encode($data);
							exit;
						}
//						$type = 'Facebook';
						
					}
				}
			} elseif ($is_social_login != 'false') {
				if (!isset($is_social_login) || trim($is_social_login) == '' || $is_social_login == 'false') {
					$error = (object) array();
					$data = array('statusCode' => strval('400'), 'message' => strval('Social Type is required.'), 'data' => $error);
					echo json_encode($data);
					exit;
				} else {
//                    $social_type = 'Facebook';
					if (isset($social_type)) {
						$customer = $this->social->getCustomerBySocial($social_token, $social_type);
//						print_r($customer->getData());die;
						if ($customer->getId()) {
							$tokenCollection = $this->tokenModelFactory->create();
							$tokenKey = $tokenCollection->createCustomerToken($customer->getId())->getToken();
							$customer_id = $customer->getId();
							// $referrel = $this->generalHelper->getReferralLinkId($customer->getId());
							$status = 'Success';
							$returnData = $this->LoginCustomerDetails($device_token, strtolower($device_type), $customer->getId());
//							$quoteId = $this->getQuoteId($customer);
//							$quote = $this->quoteRepository->get($quoteId);
//							$cartData = $quote->getAllVisibleItems();
//							$currentItemCount = (int) $quote->getItemsQty();
                            $firstName = strval($customer->getFirstname());
                            $lastName = strval($customer->getLastname());
                            $fullName = "";

                            // Get decrypted customer id
                            $customer_id = $customer->getId();
                            if ($lastName == '.' || $lastName == 'lastname') {
                                $fullName = $firstName;
                            } else {
                                $fullName = $firstName . " " . $lastName;
                            }
                            $tokenCollection = $this->tokenModelFactory->create();
                            $tokenKey = $tokenCollection->createCustomerToken($returnData->getId())->getToken();
							$address = $this->_address->load($customer->getDefaultBilling());
                            if ($customer->getDefaultBilling()){
                                $telephone = $address->getTelephone();
                            }elseif($customer->getCustomAttribute('mobile_number')){
                                $telephone = $customer->getCustomAttribute('mobile_number')->getValue();
                            }else{
                                $telephone = '';
                            }
							$output = array(
								'customer_id' => strval($customer->getId()),
								'login_status' => strval($status),
								'email' => strval($customer->getEmail()),
                                'full_name' => strval($fullName),
                                'access_token' => strval($tokenKey),
							);
							$message = "Customer logged in successfully.";
							$data = array('statusCode' => strval('200'), 'message' => strval($message), 'data' => $output);
							echo json_encode($data);
							exit;
						} else {
//						    print_r($this->request->getParams());die;
                            if ($firstname == '' && $lastname == ''){
                                $error = (object) array();
                                $data = array('statusCode' => strval('400'), 'message' => strval('Firstname and Lastname is required.'), 'data' => $error);
                                echo json_encode($data);
                                exit;
                            }elseif ($firstname == '' ){
                                $error = (object) array();
                                $data = array('statusCode' => strval('400'), 'message' => strval('Firstname is required.'), 'data' => $error);
                                echo json_encode($data);
                                exit;
                            }elseif ($lastname == '' ){
                                $error = (object) array();
                                $data = array('statusCode' => strval('400'), 'message' => strval('Lastname is required.'), 'data' => $error);
                                echo json_encode($data);
                                exit;
                            }
							$status = 'Success';
							$user['email'] = $email;
							$user['firstname'] = $firstname;
							$user['lastname'] = $lastname;
							$user['identifier'] = $social_token;
							$returnData = $this->createSocialCustomer($social_token, $social_type, $user, $device_token, strtolower($device_type));
//							$quoteId = $this->getQuoteId($returnData);
							// $referrel = $this->generalHelper->getReferralLinkId($returnData->getId());
//							$quote = $this->quoteRepository->get($quoteId);
//							$cartData = $quote->getAllVisibleItems();
//							$currentItemCount = (int) $quote->getItemsQty();
//                            print_r($returnData->getData());die;
                            $firstName = strval($returnData->getFirstname());
                            $lastName = strval($returnData->getLastname());
                            $fullName = "";

                            // Get decrypted customer id
                            $customer_id = $returnData->getId();
                            if ($lastName == '.' || $lastName == 'lastname') {
                                $fullName = $firstName;
                            } else {
                                $fullName = $firstName . " " . $lastName;
                            }
                            $tokenCollection = $this->tokenModelFactory->create();
                            $tokenKey = $tokenCollection->createCustomerToken($returnData->getId())->getToken();
							$address = $this->_address->load($customer->getDefaultBilling());
                            if ($customer->getDefaultBilling()){
                                $telephone = $address->getTelephone();
                            }elseif($customer->getCustomAttribute('mobile_number')){
                                $telephone = $customer->getCustomAttribute('mobile_number')->getValue();
                            }else{
                                $telephone = '';
                            }
							$output = array(
								'customer_id' => strval($returnData->getId()),
								'login_status' => strval($status),
								'email' => strval($returnData->getEmail()),
                                'full_name' => strval($fullName),
                                'access_token' => strval($tokenKey),
							);

                            $returnData->sendNewAccountEmail();

                            $message = "Customer logged in successfully.";
							$data = array('statusCode' => strval('200'), 'message' => strval($message), 'data' => $output);
							echo json_encode($data);
							exit;
						}
					}
				}
			} else {
				$error = (object) array();
				$message = "The email which you have entered is not registerd";
				$data = array('statusCode' => strval('400'), 'message' => strval($message), 'data' => $error);
				echo json_encode($data);
				exit;
			}
		} catch (Exception $e) {
			$error = (object) array();
			$message = "Invalid login or password.";
			$data = array('statusCode' => strval('400'), 'message' => strval($e->getMessage()), 'data' => $error);
			echo json_encode($data);
			exit;
		}
	}

	public function loginCustomer($device_token, $device_type, $customerId) {
		try {
			$deviceIds = $this->generalHelper->_checkDeviceIds($device_token, $customerId, $device_type);
			if (empty($deviceIds) && $device_token != '') {
				$connection = $this->resourceConnection->getConnection();
				$tableName = $this->resourceConnection->getTableName('bv_auth_mobile_token');
				$data = array('customer_id' => $customerId,
					'device_token' => $device_token,
					'platform' => $device_type,
					'login_status' => $this->generalHelper->loginSuccess(),
				);
				$connection->insertOnDuplicate($tableName, $data);
			}
			$status = $this->generalHelper->loginSuccess();
			if (!empty($deviceIds)) {
				$connection = $this->resourceConnection->getConnection();
				$tableName = $this->resourceConnection->getTableName('bv_auth_mobile_token');
				$updateStatus = "UPDATE `bv_auth_mobile_token` SET `login_status`= '" . $status . "' WHERE customer_id = '" . $customerId . "' AND platform LIKE '" . $device_type . "' AND device_token = '" . $device_token . "'";
				$connection->query($updateStatus);
			}
		} catch (Exception $e) {
			$error = (object) array();
			$message = "Something went wrong.";
			$data = array('statusCode' => strval('400'), 'message' => strval($message), 'data' => $error);
			echo json_encode($data);
			exit;
		}
	}

	public function LoginCustomerDetails($device_token, $device_type, $customerId) {
		try {
			$deviceIds = $this->generalHelper->_checkDeviceIds($device_token, $customerId, $device_type);
			if (empty($deviceIds) && $device_token != '') {
				$connection = $this->resourceConnection->getConnection();
				$tableName = $this->resourceConnection->getTableName('bv_auth_mobile_token');
				$data = array('customer_id' => $customerId,
					'device_token' => $device_token,
					'platform' => $device_type,
					'login_status' => $this->generalHelper->loginSuccess(),
				);
				$connection->insertOnDuplicate($tableName, $data);
			}
			$status = $this->generalHelper->loginSuccess();
			if (!empty($deviceIds)) {
				$connection = $this->resourceConnection->getConnection();
				$tableName = $this->resourceConnection->getTableName('bv_auth_mobile_token');
				$updateStatus = "UPDATE `bv_auth_mobile_token` SET `login_status`= '" . $status . "' WHERE customer_id = '" . $customerId . "' AND platform LIKE '" . $device_type . "' AND device_token = '" . $device_token . "'";
				$connection->query($updateStatus);
			}
		} catch (Exception $e) {
			$error = (object) array();
			$message = "Something went wrong.";
			$data = array('statusCode' => strval('400'), 'message' => strval($message), 'data' => $error);
			echo json_encode($data);
			exit;
		}
	}

	protected function getQuoteId($customer) {
		$quoteId = 0;
		if ((!is_null($customer))) {
			try {
				$quote = $this->cartManagementInterface->getCartForCustomer($customer->getId());
				$quoteId = $quote->getId();
				if (!$quote->getIsActive()) {
					$quoteId = $this->cartManagementInterface->createEmptyCartForCustomer($customer->getId());
				}
				$quote = $this->quoteRepository->get($quoteId);
				$quote->setStoreId(1)->save();
			} catch (\Magento\Framework\Exception\NoSuchEntityException $e) {
				$quoteId = $this->cartManagementInterface->createEmptyCartForCustomer($customer->getId());
				$quote = $this->quoteRepository->get($quoteId);
				$quote->setStoreId(1)->save();
				// if ($quoteId) {
				// 	$customer->setQuoteId($quoteId)->save();
				// }
			}
		}
		return $quoteId;
	}

	public function customerAutoLogin($customerId) {
		// Customer Session. If loged in then logout.
		$customersession = $this->customerSession;
		if ($customersession->isLoggedIn()) {
			$customersession->logout();
		}

		if (!empty($customerId)) {
			/* @var $customerAccountManagement \Magento\Customer\Api\AccountManagementInterface */
			$customerAccountManagement = $this->accountManagementInterface;
			try {
				/* @var $customer \Magento\Customer\Api\Data\CustomerInterface */
				$this->_storeManager->setCurrentStore('default');
				$websiteId = $this->_storeManager->getStore()->getWebsiteId();

				/* @var $_customer \Magento\Customer\Model\Customer */
				$_customer = $this->customerCheck->setWebsiteId($websiteId)->load($customerId);
				$customersession->setCustomerAsLoggedIn($_customer);
				//$customersession->setCustomerDataAsLoggedIn($_customer);
				$customersession->regenerateId();
				return true;
			} catch (\Exception $e) {

			}
		}
		return false;
	}

	public function checkIsLogin($customerId) {
		if ($this->customerSession->isLoggedIn()) {
			$sessionCustomerId = $this->customerSession->getCustomer()->getId();
			if ($sessionCustomerId == $customerId) {
				//$this->customerAutoLogin($customerId);
				return true;
			}
		} else {
			$this->customerAutoLogin($customerId);
		}
		return false;
	}

    public function getCurrencyCode($storeId) {
        $this->_storeManager->setCurrentStore($storeId);
        $currencyCode = $this->_storeManager->getStore()->getCurrentCurrency()
            ->getCode();

        return $currencyCode;
    }


    public function getCustomerList($timestamp = ""){
    	$customerArray = [];
        $collection = $this->customerCheck->getCollection();
		$collection->addAttributeToSelect("*");
		if($timestamp){
			$dateFormat = date('Y-m-d H:i:s', $timestamp);
            $collection->addFieldToFilter('updated_at', array('gt' => $dateFormat));
        }
		$collection->load();
		foreach ($collection as $customer) {
			if($customer->getAddresses()){
				foreach ($customer->getAddresses() as $address)
				{
					$street = $address->getStreet();
					if(isset($street[1])){
						$streetLine2 =  $street[1];
					}else{
						$streetLine2 = null;
					}
					if(isset($street[2])){
						$streetLine3 = $street[2];
					}else{
						$streetLine3 = null;
					}

					$customerArray[] = [
							"Division" => $customer->getErpDivision(),
							"CustomerNumber" => $customer->getErpCustomerNumber(),
							"CustomerName" => $customer->getName(),
							"EmailAddress" => $customer->getEmail(),
							"PhoneNumber" => $customer->getTelephone(),
							"AddressLine1" => $street[0],
							"AddressLine2" => $streetLine2,
							"AddressLine3" => $streetLine3,
							"City" => $address->getCity(),
							"State" => $address->getRegion(),
							"ZipCode" => $address->getPostcode(),
							"CountryCode" => $address->getCountry(),
							"SalesPersonCode" => $customer->getSalesPersonCode(),
							"FirstName" => $customer->getFirstname(),
							"LastName" => $customer->getLastname(),
							"MobilePhone" => $customer->getCustomerMobilePhone(),
						];
				}

			}else{
					$customerArray[] = [
							"Division" => $customer->getErpDivision(),
							"CustomerNumber" => $customer->getErpCustomerNumber(),
							"CustomerName" => $customer->getName(),
							"EmailAddress" => $customer->getEmail(),
							"PhoneNumber" => $customer->getTelephone(),
							"AddressLine1" => null,
							"AddressLine2" => null,
							"AddressLine3" => null,
							"City" => null,
							"State" => null,
							"ZipCode" => null,
							"CountryCode" => null,
							"SalesPersonCode" => $customer->getSalesPersonCode(),
							"FirstName" => $customer->getFirstname(),
							"LastName" => $customer->getLastname(),
							"MobilePhone" => $customer->getCustomerMobilePhone(),
						];
				}
			
		}
        $customersData = [
            "statusCode" => "200",
            "status" => "Success",
            "message" => "Customers data get successfully",
            "data" => $customerArray
        ];
        $ary_response[] = $customersData;

        return $ary_response;
    }

}
